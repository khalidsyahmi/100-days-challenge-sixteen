const express = require("express");
const mongodb = require("mongodb"); // to use mongodb obj

const router = express.Router();
const ObjectId = mongodb.ObjectId; // class that mongodb uses to instantiate

//reach out to db
const db = require("../data/database");

router.get("/", function (req, res) {
  res.redirect("/posts");
});

router.get("/posts", async function (req, res) {
  // new projection
  const postList = await db
    .getDbKey()
    .collection("posts")
    .find({})
    .project({ title: 1, summary: 1, "author.name": 1 })
    .toArray();

  res.render("posts-list", { postKey: postList });
});

router.get("/new-post", async function (req, res) {
  // .find() will return a promise that will
  const authors = await db.getDbKey().collection("authors").find().toArray();
  /* console.log(authors); */
  res.render("create-post", { authorKey: authors }); //name keys related to data dealt
});

// view post request
router.get("/posts/:id", async function (req, res, next) {
  // allow postId used over
  let postId = req.params.id;
  // new projection syntax does'nt work here
  //manual try handling // nature of ObjectId conversion
  // next Express js reserved middleware function
  // next function just throw the same predefined middleware
  // req, res and next are all middlewares
  try {
    postId = new ObjectId(postId);
  } catch (error) {
    /* return res.status(404).render("404"); */
    return next(error);
  }

  const post = await db
    .getDbKey()
    .collection("posts")
    .findOne({ _id: postId }, { summary: 0 });

  if (!post) {
    return res.status(404).render("404");
  }

  post.humanReadableDate = post.date.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  post.date = post.date.toISOString();

  res.render("post-detail", { detailKey: post });
});

// get edit posts = title, summary, body
router.get("/posts/:id/edit", async function (req, res) {
  const editId = req.params.id;
  const post = await db
    .getDbKey()
    .collection("posts")
    .findOne({ _id: new ObjectId(editId) }, { title: 1, summary: 1, body: 1 });

  if (!post) {
    return res.status(404).render("404");
  }

  res.render("update-post", { updateKey: post });
});

// create post request
router.post("/posts", async function (req, res) {
  //trade-off for getting authorId and name data is to skip extra manual queries in the future

  //lemme remind you for the 5th time, req bodies is from html tag name values
  const authorId = new ObjectId(req.body.author);
  //manually get name in author's collection in mongoDB // name matching authorId in
  // caution !!!!! // if i dont put await it will skip this entirely
  const author = await db
    .getDbKey()
    .collection("authors")
    .findOne({ _id: authorId });

  // create js object from incoming data body // new requests needs new bodies
  //lemme remind you for the 5th time, req bodies is from html tag name values
  const newPostCreation = {
    title: req.body.title,
    summary: req.body.summary,
    body: req.body.content,
    date: new Date(), // generated by blueprint
    author: {
      id: authorId,
      name: author.name,
      email: author.mail,
      // for the sake of demo
      //price to pay for users changing emails
      //no more reaching other collction to get the related data
    },
  };

  // any operation that can take long uses async/await
  // js obj created from query as insert parameter
  const postCreation = await db
    .getDbKey()
    .collection("posts")
    .insertOne(newPostCreation);
  /* console.log(postCreation); */
  res.redirect("/posts"); //after post redirect to refresh page
});

// post edit request
// all that error for flipping req, res backwards
router.post("/posts/:id/edit", async function (req, res) {
  const postId = new ObjectId(req.params.id);

  await db
    .getDbKey()
    .collection("posts")
    .updateOne(
      { _id: postId },
      {
        $set: {
          title: req.body.title,
          summary: req.body.summary,
          body: req.body.content,
          date: new Date(), // comment out if you dont want updated date time
        },
      }
    );

  res.redirect("/posts");
});

router.post("/posts/:id/delete", async function (req, res) {
  const postId = new ObjectId(req.params.id);
  await db.getDbKey().collection("posts").deleteOne({ _id: postId });

  res.redirect("/posts");
});

module.exports = router;
